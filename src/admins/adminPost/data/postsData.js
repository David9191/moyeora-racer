const postsData = [
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'React prop에 관하여',
    content:
      'React에서 prop(속성)은 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하기 위한 메커니즘입니다. 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때, 자식 컴포넌트는 prop을 통해 전달받은 데이터를 사용할 수 있습니다.\nprop은 부모 컴포넌트에서 자식 컴포넌트로 넘겨지는 것으로, 자식 컴포넌트는 해당 prop을 자신의 속성으로 사용할 수 있습니다. 부모 컴포넌트는 자식 컴포넌트를 렌더링할 때 prop에 값을 할당하고, 자식 컴포넌트는 해당 prop을 사용하여 UI를 구성하거나 작업을 수행할 수 있습니다. 	React에서 prop은 읽기 전용입니다.\n즉, 자식 컴포넌트에서 prop을 직접 수정할 수는 없습니다. 부모 컴포넌트에서 prop의 값을 변경하려면 부모 컴포넌트에서 상태(state)를 변경하고, 변경된 상태를 다시 prop으로 전달해야 합니다.	',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.06',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'CSS Grid로 테이블 정렬 쉽게 하기',
    content:
      'CSS Grid를 사용하여 테이블을 정렬하는 것은 매우 간단하고 효과적입니다. 다음은 CSS Grid를 활용하여 테이블을 정렬하는 방법에 대한 예시입니다. \nHTML 마크업 생성:	\n먼저, 테이블의 데이터를 HTML 마크업으로 생성합니다. 일반적인 <table> 요소와 <tr>, <th>, <td> 요소를 사용하여 테이블 구조를 만들어줍니다. \nCSS Grid 스타일 적용:\nCSS Grid를 사용하여 테이블을 정렬하기 위해 .grid-container 클래스를 만들고 그리드 컨테이너로 설정합니다. 그리드 컨테이너에는 그리드 템플릿 열의 개수와 너비를 지정합니다. 헤더 셀과 데이터 셀에 대한 스타일도 추가합니다.\n',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.03',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'React prop에 관하여',
    content:
      'React에서 prop(속성)은 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하기 위한 메커니즘입니다. 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때, 자식 컴포넌트는 prop을 통해 전달받은 데이터를 사용할 수 있습니다.\nprop은 부모 컴포넌트에서 자식 컴포넌트로 넘겨지는 것으로, 자식 컴포넌트는 해당 prop을 자신의 속성으로 사용할 수 있습니다. 부모 컴포넌트는 자식 컴포넌트를 렌더링할 때 prop에 값을 할당하고, 자식 컴포넌트는 해당 prop을 사용하여 UI를 구성하거나 작업을 수행할 수 있습니다. 	React에서 prop은 읽기 전용입니다.\n즉, 자식 컴포넌트에서 prop을 직접 수정할 수는 없습니다. 부모 컴포넌트에서 prop의 값을 변경하려면 부모 컴포넌트에서 상태(state)를 변경하고, 변경된 상태를 다시 prop으로 전달해야 합니다.	',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.06',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'CSS Grid로 테이블 정렬 쉽게 하기',
    content:
      'CSS Grid를 사용하여 테이블을 정렬하는 것은 매우 간단하고 효과적입니다. 다음은 CSS Grid를 활용하여 테이블을 정렬하는 방법에 대한 예시입니다. \nHTML 마크업 생성:	\n먼저, 테이블의 데이터를 HTML 마크업으로 생성합니다. 일반적인 <table> 요소와 <tr>, <th>, <td> 요소를 사용하여 테이블 구조를 만들어줍니다. \nCSS Grid 스타일 적용:\nCSS Grid를 사용하여 테이블을 정렬하기 위해 .grid-container 클래스를 만들고 그리드 컨테이너로 설정합니다. 그리드 컨테이너에는 그리드 템플릿 열의 개수와 너비를 지정합니다. 헤더 셀과 데이터 셀에 대한 스타일도 추가합니다.\n',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.03',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'React prop에 관하여',
    content:
      'React에서 prop(속성)은 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하기 위한 메커니즘입니다. 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때, 자식 컴포넌트는 prop을 통해 전달받은 데이터를 사용할 수 있습니다.\nprop은 부모 컴포넌트에서 자식 컴포넌트로 넘겨지는 것으로, 자식 컴포넌트는 해당 prop을 자신의 속성으로 사용할 수 있습니다. 부모 컴포넌트는 자식 컴포넌트를 렌더링할 때 prop에 값을 할당하고, 자식 컴포넌트는 해당 prop을 사용하여 UI를 구성하거나 작업을 수행할 수 있습니다. 	React에서 prop은 읽기 전용입니다.\n즉, 자식 컴포넌트에서 prop을 직접 수정할 수는 없습니다. 부모 컴포넌트에서 prop의 값을 변경하려면 부모 컴포넌트에서 상태(state)를 변경하고, 변경된 상태를 다시 prop으로 전달해야 합니다.	',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.06',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'CSS Grid로 테이블 정렬 쉽게 하기',
    content:
      'CSS Grid를 사용하여 테이블을 정렬하는 것은 매우 간단하고 효과적입니다. 다음은 CSS Grid를 활용하여 테이블을 정렬하는 방법에 대한 예시입니다. \nHTML 마크업 생성:	\n먼저, 테이블의 데이터를 HTML 마크업으로 생성합니다. 일반적인 <table> 요소와 <tr>, <th>, <td> 요소를 사용하여 테이블 구조를 만들어줍니다. \nCSS Grid 스타일 적용:\nCSS Grid를 사용하여 테이블을 정렬하기 위해 .grid-container 클래스를 만들고 그리드 컨테이너로 설정합니다. 그리드 컨테이너에는 그리드 템플릿 열의 개수와 너비를 지정합니다. 헤더 셀과 데이터 셀에 대한 스타일도 추가합니다.\n',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.03',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'React prop에 관하여',
    content:
      'React에서 prop(속성)은 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하기 위한 메커니즘입니다. 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때, 자식 컴포넌트는 prop을 통해 전달받은 데이터를 사용할 수 있습니다.\nprop은 부모 컴포넌트에서 자식 컴포넌트로 넘겨지는 것으로, 자식 컴포넌트는 해당 prop을 자신의 속성으로 사용할 수 있습니다. 부모 컴포넌트는 자식 컴포넌트를 렌더링할 때 prop에 값을 할당하고, 자식 컴포넌트는 해당 prop을 사용하여 UI를 구성하거나 작업을 수행할 수 있습니다. 	React에서 prop은 읽기 전용입니다.\n즉, 자식 컴포넌트에서 prop을 직접 수정할 수는 없습니다. 부모 컴포넌트에서 prop의 값을 변경하려면 부모 컴포넌트에서 상태(state)를 변경하고, 변경된 상태를 다시 prop으로 전달해야 합니다.	',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.06',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'CSS Grid로 테이블 정렬 쉽게 하기',
    content:
      'CSS Grid를 사용하여 테이블을 정렬하는 것은 매우 간단하고 효과적입니다. 다음은 CSS Grid를 활용하여 테이블을 정렬하는 방법에 대한 예시입니다. \nHTML 마크업 생성:	\n먼저, 테이블의 데이터를 HTML 마크업으로 생성합니다. 일반적인 <table> 요소와 <tr>, <th>, <td> 요소를 사용하여 테이블 구조를 만들어줍니다. \nCSS Grid 스타일 적용:\nCSS Grid를 사용하여 테이블을 정렬하기 위해 .grid-container 클래스를 만들고 그리드 컨테이너로 설정합니다. 그리드 컨테이너에는 그리드 템플릿 열의 개수와 너비를 지정합니다. 헤더 셀과 데이터 셀에 대한 스타일도 추가합니다.\n',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.03',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'React prop에 관하여',
    content:
      'React에서 prop(속성)은 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하기 위한 메커니즘입니다. 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때, 자식 컴포넌트는 prop을 통해 전달받은 데이터를 사용할 수 있습니다.\nprop은 부모 컴포넌트에서 자식 컴포넌트로 넘겨지는 것으로, 자식 컴포넌트는 해당 prop을 자신의 속성으로 사용할 수 있습니다. 부모 컴포넌트는 자식 컴포넌트를 렌더링할 때 prop에 값을 할당하고, 자식 컴포넌트는 해당 prop을 사용하여 UI를 구성하거나 작업을 수행할 수 있습니다. 	React에서 prop은 읽기 전용입니다.\n즉, 자식 컴포넌트에서 prop을 직접 수정할 수는 없습니다. 부모 컴포넌트에서 prop의 값을 변경하려면 부모 컴포넌트에서 상태(state)를 변경하고, 변경된 상태를 다시 prop으로 전달해야 합니다.	',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.06',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'CSS Grid로 테이블 정렬 쉽게 하기',
    content:
      'CSS Grid를 사용하여 테이블을 정렬하는 것은 매우 간단하고 효과적입니다. 다음은 CSS Grid를 활용하여 테이블을 정렬하는 방법에 대한 예시입니다. \nHTML 마크업 생성:	\n먼저, 테이블의 데이터를 HTML 마크업으로 생성합니다. 일반적인 <table> 요소와 <tr>, <th>, <td> 요소를 사용하여 테이블 구조를 만들어줍니다. \nCSS Grid 스타일 적용:\nCSS Grid를 사용하여 테이블을 정렬하기 위해 .grid-container 클래스를 만들고 그리드 컨테이너로 설정합니다. 그리드 컨테이너에는 그리드 템플릿 열의 개수와 너비를 지정합니다. 헤더 셀과 데이터 셀에 대한 스타일도 추가합니다.\n',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.03',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'React prop에 관하여',
    content:
      'React에서 prop(속성)은 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하기 위한 메커니즘입니다. 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때, 자식 컴포넌트는 prop을 통해 전달받은 데이터를 사용할 수 있습니다.\nprop은 부모 컴포넌트에서 자식 컴포넌트로 넘겨지는 것으로, 자식 컴포넌트는 해당 prop을 자신의 속성으로 사용할 수 있습니다. 부모 컴포넌트는 자식 컴포넌트를 렌더링할 때 prop에 값을 할당하고, 자식 컴포넌트는 해당 prop을 사용하여 UI를 구성하거나 작업을 수행할 수 있습니다. 	React에서 prop은 읽기 전용입니다.\n즉, 자식 컴포넌트에서 prop을 직접 수정할 수는 없습니다. 부모 컴포넌트에서 prop의 값을 변경하려면 부모 컴포넌트에서 상태(state)를 변경하고, 변경된 상태를 다시 prop으로 전달해야 합니다.	',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.06',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'CSS Grid로 테이블 정렬 쉽게 하기',
    content:
      'CSS Grid를 사용하여 테이블을 정렬하는 것은 매우 간단하고 효과적입니다. 다음은 CSS Grid를 활용하여 테이블을 정렬하는 방법에 대한 예시입니다. \nHTML 마크업 생성:	\n먼저, 테이블의 데이터를 HTML 마크업으로 생성합니다. 일반적인 <table> 요소와 <tr>, <th>, <td> 요소를 사용하여 테이블 구조를 만들어줍니다. \nCSS Grid 스타일 적용:\nCSS Grid를 사용하여 테이블을 정렬하기 위해 .grid-container 클래스를 만들고 그리드 컨테이너로 설정합니다. 그리드 컨테이너에는 그리드 템플릿 열의 개수와 너비를 지정합니다. 헤더 셀과 데이터 셀에 대한 스타일도 추가합니다.\n',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.03',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'React prop에 관하여',
    content:
      'React에서 prop(속성)은 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하기 위한 메커니즘입니다. 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때, 자식 컴포넌트는 prop을 통해 전달받은 데이터를 사용할 수 있습니다.\nprop은 부모 컴포넌트에서 자식 컴포넌트로 넘겨지는 것으로, 자식 컴포넌트는 해당 prop을 자신의 속성으로 사용할 수 있습니다. 부모 컴포넌트는 자식 컴포넌트를 렌더링할 때 prop에 값을 할당하고, 자식 컴포넌트는 해당 prop을 사용하여 UI를 구성하거나 작업을 수행할 수 있습니다. 	React에서 prop은 읽기 전용입니다.\n즉, 자식 컴포넌트에서 prop을 직접 수정할 수는 없습니다. 부모 컴포넌트에서 prop의 값을 변경하려면 부모 컴포넌트에서 상태(state)를 변경하고, 변경된 상태를 다시 prop으로 전달해야 합니다.	',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.06',
    updatedAt: '',
  },
  {
    category: '지식 공유',
    writer: '지돌이',
    title: 'CSS Grid로 테이블 정렬 쉽게 하기',
    content:
      'CSS Grid를 사용하여 테이블을 정렬하는 것은 매우 간단하고 효과적입니다. 다음은 CSS Grid를 활용하여 테이블을 정렬하는 방법에 대한 예시입니다. \nHTML 마크업 생성:	\n먼저, 테이블의 데이터를 HTML 마크업으로 생성합니다. 일반적인 <table> 요소와 <tr>, <th>, <td> 요소를 사용하여 테이블 구조를 만들어줍니다. \nCSS Grid 스타일 적용:\nCSS Grid를 사용하여 테이블을 정렬하기 위해 .grid-container 클래스를 만들고 그리드 컨테이너로 설정합니다. 그리드 컨테이너에는 그리드 템플릿 열의 개수와 너비를 지정합니다. 헤더 셀과 데이터 셀에 대한 스타일도 추가합니다.\n',
    viewCnt: 153,
    imageUrl: '',
    createdAt: '2023.06.03',
    updatedAt: '',
  },
];

export default postsData;
